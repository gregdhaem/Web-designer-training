.conteneur{
    height: 450px;
    border: 1px solid black;
}

/* Les 4 propriétés suivantes sont indissociables des unes des autres afin d'obtenir un centrage parfait des éléments enfants */

#flex{
    height: 100%; /* soit 100% ou récupérer la hauteur du parent*/
    display: flex; /* Ne pas oublier les web kits : IE, FF, etc*/
    justify-content: center; /* propriétés attribuées aux éléments enfants devenus éléments de type felx-item.
    ATTENTION : Si on souhaute deux occurences de mazone, celles-ci  se retrouveront l'une à coté de l'autre.
    On ne pourra pas leurs attribuer de display: block puisque nous sommes pas en face de'éléments de type inline et/ou block.
    Des enfants d'un conteneur flex, peuvent devenir des conteneur flex.*/
    align-items: center;
}

#flex2{    
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: space-evenly;
    flex-direction: row; 
    /* Si vous souhaiter placer des éléments enfants l'un sous l'autre il faut rajouter la propriété flex-direction qui a pour valeur par défaut : row; .
    Si aucune propriété'Justify-content' n'est spécifié ,le display-flex prendra par défaut la prop. jsutify-content: flex-start;. */
}

.mazone{
    background: blue;
    width: 200px;
    height: 250px
}

.mazone2{
    background: wheat;
    width: 200px;
    height: 250px;
    display: flex;
    justify-content: space-evenly;
    align-items: center;
}

.mazone3{
    background: red;
    width: 200px;
    height: 250px
}

.block{
    background: greenyellow;
    width: 50px;
    height: 50px
}